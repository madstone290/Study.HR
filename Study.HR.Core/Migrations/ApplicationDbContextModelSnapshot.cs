// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Study.HR.Core.Infrastructure.Data;

#nullable disable

namespace Study.HR.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EnteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginId")
                        .HasColumnType("text");

                    b.Property<string>("LoginPassword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("text");

                    b.Property<string>("SalaryType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.EmployeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeDetail");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.EmployeeSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BaseSalary")
                        .HasColumnType("double precision");

                    b.Property<double>("BonusRate")
                        .HasColumnType("double precision");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidBefore")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSalary", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.SalaryRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BaseSalary")
                        .HasColumnType("double precision");

                    b.Property<double>("BonusRate")
                        .HasColumnType("double precision");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeSalaryId")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWorked")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("WorkTimeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeSalaryId");

                    b.HasIndex("WorkTimeId");

                    b.ToTable("SalaryRecord", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWorked")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkTime", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.EmployeeDetail", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithOne("Detail")
                        .HasForeignKey("Study.HR.Core.Domain.Entities.EmployeeDetail", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.SalaryRecord", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.HR.Core.Domain.Entities.EmployeeSalary", "EmployeeSalary")
                        .WithMany()
                        .HasForeignKey("EmployeeSalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.HR.Core.Domain.Entities.WorkTime", "WorkTime")
                        .WithMany()
                        .HasForeignKey("WorkTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeSalary");

                    b.Navigation("WorkTime");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.WorkTime", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
