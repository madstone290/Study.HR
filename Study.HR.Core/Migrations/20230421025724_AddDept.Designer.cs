// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Study.HR.Core.Infrastructure.Data;

#nullable disable

namespace Study.HR.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230421025724_AddDept")]
    partial class AddDept
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.CareerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CareerType");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UpperDepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UpperDepartmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("CareerTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsHouseOwner")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("integer");

                    b.Property<int?>("JobRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ResidentNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RetireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RetireReason")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CareerTypeId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("JobRoleId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobPosition");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobRole");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.PayProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BaseSalary")
                        .HasColumnType("double precision");

                    b.Property<double>("BonusRate")
                        .HasColumnType("double precision");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("text");

                    b.Property<string>("SalaryType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("PayProfile", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BaseSalary")
                        .HasColumnType("double precision");

                    b.Property<double>("BonusRate")
                        .HasColumnType("double precision");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWorked")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int?>("PayProfileId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("WorkTimeId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayProfileId");

                    b.HasIndex("WorkTimeId");

                    b.ToTable("Payroll", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesWorked")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkTime", (string)null);
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Department", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Department", "UpperDepartment")
                        .WithMany()
                        .HasForeignKey("UpperDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UpperDepartment");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.CareerType", "CareerType")
                        .WithMany()
                        .HasForeignKey("CareerTypeId");

                    b.HasOne("Study.HR.Core.Domain.Entities.EmploymentType", "EmploymentType")
                        .WithMany()
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("Study.HR.Core.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId");

                    b.HasOne("Study.HR.Core.Domain.Entities.JobRole", "JobRole")
                        .WithMany()
                        .HasForeignKey("JobRoleId");

                    b.Navigation("CareerType");

                    b.Navigation("EmploymentType");

                    b.Navigation("JobPosition");

                    b.Navigation("JobRole");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.PayProfile", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithOne("PayProfile")
                        .HasForeignKey("Study.HR.Core.Domain.Entities.PayProfile", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Payroll", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.HR.Core.Domain.Entities.PayProfile", "PayProfile")
                        .WithMany()
                        .HasForeignKey("PayProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.HR.Core.Domain.Entities.WorkTime", "WorkTime")
                        .WithMany()
                        .HasForeignKey("WorkTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PayProfile");

                    b.Navigation("WorkTime");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.WorkTime", b =>
                {
                    b.HasOne("Study.HR.Core.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Study.HR.Core.Domain.Entities.Employee", b =>
                {
                    b.Navigation("PayProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
